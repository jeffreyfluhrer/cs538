import numpy as np
from numpy.linalg import inv
import time

class StateMachine(object):

  def __init__(self,num_switches=2,num_hosts=4):

    # The number of hosts and switches -- this needs to change with the example case
    # This is metadata
    self.num_switches = num_switches
    self.num_hosts = num_hosts
    self.stateCovarMult = 0.001
    self.measCovarMult = 0.1
    self.processNoiseMult = 0.000001
    self.measNoiseCrossMult = 100.0
    self.measNoiseDiagMult = 0.1
    # for the process noise matrix (see below)
    # |d .l.|m .n.m .n.m .n.m..n.m .n. 
    # |.d...|.m....m....m....m....m...
    # |..d..|..m....m....m....m....m..
    # |.l.d.|.n.m..n.m..n.m..n.m..n.m.
    # |....d|....m....m....m....m....m
    # |-------------------------------
    # |m .n.|j.....k..................
    # |.m...|.j.......................
    # |..m..|.j......................
    # |.n.m.|...j.....................
    # |....m|....j....................
    # |m .n.|.....j...................
    # |.m...|......j..................
    # |..m..|..k....j.................
    # |.n.m.|........j................
    # |....m|..........j..............

    # upper left matrix size -> self.num_flow by self.num_flow
    # d = (1 - scale_down) * flow_pnoise_mult
    # l = flow_pnoise_mult
    # upper right matrix size -> self.num_flows by self.num_meas
    # m = (1 - scale_down) * self.cross_pnoise_mult
    # n = self.cross_pnoise_mult
    # lower left matrix size -> self.num_meas by num_flow
    # j = (1 - scale_down) * self.cross_pnoise_mult
    # k = self.cross_pnoise_mult
    # upper left matrix size -> self.num_meas by self.num_meas
    # d = (1 - scale_down) * self.meas_pnoise_mult
    # l = self.meas_pnoise_mult
    self.flow_pnoise_mult = 500
    self.cross_pnoise_mult = 400
    self.flow_meas_pnoise_mult = 200.0
    self.meas_pnoise_mult = 100.0
    self.pnoise_diag_scale_down = 0.95
    # This truly initializes the routing matrix
    self.all_zeros = True

    # The time counter which should get updated each timestep
    # Just be sure to get current time before taking any time difference
    self.prev_time = time.time()
    self.curr_time = self.prev_time + 1
    self.init_time = self.prev_time
    
    # The state vector in the order of flows and then measured switch stats
    # This state vector counts from src = host 1 -> dst = host 2 <-> n then so forth
    self.num_flows = self.num_hosts * (self.num_hosts - 1)
    self.num_meas = self.num_switches * self.num_flows
    
    # The switch stats is the measured flow stats for each switch
    # Indexing this will be something to be cautious of
    # The size is the number of flows and the number of measurements which is a flow at each switch
    self.size_state_vec = self.num_flows * (self.num_switches + 1)

    # This below is the state vector for the system
    # I think this is enough initialization
    # Equation 5b
    # This is the s vector
    self.StateVec = np.zeros((self.size_state_vec, 1))

    # This below is the state covariance matrix
    # I think this is sufficient for now -- can revisit later
    # This is the P matrix
    self.StateCovar = np.ones((self.size_state_vec,self.size_state_vec))
    self.StateCovar *= self.stateCovarMult

    # This is the Q term or known as process noise
    # This is the Q matrix
    #self.ProcessNoise = np.ones((self.size_state_vec,self.size_state_vec))
    #self.ProcessNoise *= self.processNoiseMult
    self.InitProcessNoise()

    # This below is the state transition matrix
    # This allows the computation of the predicted measurements using the estimated flow rates
    # Need to build A array to reflect the routing of the network
    #self.StateTrans = np.zeros((self.size_state_vec, self.size_state_vec))
    # This is the F matrix -- Initialize to all zeros to begin with -- calculate when needed later
    self.StateTrans = np.zeros((self.size_state_vec, self.size_state_vec))
    # Also init routing matrix just in case
    self.route_matrix = self.InitRoutingMatrix(all_zeros=self.all_zeros)
    #print("The routing matrix is:")
    #print(self.route_matrix) 

    # This below is the Measurement Noise Covar matrix
    # Initializes the R matrix
    # |d ........| 
    # |.d........|
    # |..d...l...|
    # |...d......|
    # |....d.....| 
    # |.....d....|
    # |......d...|
    # |..l....d..|
    # |........d.|
    # |.........d|
    # matrix size -> self.num_meas by self.num_meas
    # d = self.measNoiseDiagMult
    # l = self.measNoiseCrossMult
    temp = np.ones((self.num_meas,self.num_meas))
    temp -= np.eye(self.num_meas,self.num_meas)
    self.MeasCovar = np.eye(self.num_meas,self.num_meas) * self.measNoiseDiagMult + temp * self.measNoiseCrossMult

    # This below is the Measurement matrix
    #self.MeasMatrix = zeros((self.num_meas,self.size_state_vec))
    # Initializes the H matrix
    self.InitMeasMatrix()

    # This below is the Gain Matrix
    # This is the G matrix
    #self.Gains = np.zeros((self.size_state_vec,self.size_state_vec))
    self.Gains = np.zeros((self.size_state_vec,self.num_meas))
    
    # This is the measurement vector -- the measurements received from the query
    # This is the z vector
    self.MeasVector = np.zeros((self.num_meas,1))

    # Initialize this but don't likely need this since it will get updated the first iteration
    # This is the output of Equation 11
    self.StatePrediction = np.zeros((self.size_state_vec,1))

 # --------------------------------------------------------------------------------------------
 # --------------------------------------------------------------------------------------------
 # Start State initialization functions here --------------------------------------------------
 # --------------------------------------------------------------------------------------------
 # --------------------------------------------------------------------------------------------

  # This routine initializes the state transition function
  # This array is in the form of [[C 0],[A I]] where C => num_flow by num_flow
  # The upper right zero array should size num_flow by num_meas
  # Equation 5a
  def CalcStateTrans(self, time_diff):
     # initialize upper left to an eye matrix of size c
     Carray = np.eye(self.num_flows)
     ZeroArray = np.zeros((self.num_flows,self.num_meas))
     # TODO:  The A array needs to know the routing map of the network
     # This needs to work with the routing code so when a flow is first installed in a switch
     # to add a term to this array
     # Ideally, set this to all zeros initially and then get this from the switch object
     #print(time_diff)
     #print(self.route_matrix) 
     Aarray = self.route_matrix * time_diff
     IdenArray = np.eye(self.num_meas)
     comp1 = np.concatenate((Carray, ZeroArray), axis=1)
     comp2 = np.concatenate((Aarray, IdenArray), axis=1)
     self.StateTrans = np.concatenate((comp1,comp2),axis=0)

  # This routine needs to be able to receive a routing matrix since it needs to be defined
  # externally from the routing service
  # The route matrix is inserted into the transition matrix and the transition matrix is updated
  # Basically, it is the same as above with route matrix info
  def DefineRoutingMatrix(self, route_matrix):
     self.route_matrix = route_matrix

  def AddRouteForRouteMatrix(self, switchNo, HostSrc, HostDst):
     counter = 0
     for i in range(self.num_hosts):
       for j in range(self.num_hosts):
         if i != j:
           #print("The counter number is " + str(counter))
           if i == (HostSrc - 1) and j == (HostDst - 1):
             self.route_matrix[(switchNo - 1) * self.num_flows + counter, counter] = 1
             return
           counter += 1

  # This routine initializes the measurement matrix
  # Equation 7 -- I believe this is unchanging
  def InitMeasMatrix(self):
     # initialize upper left to an eye matrix of size c
     ZeroArray = np.zeros((self.num_meas,self.num_flows))
     IdenArray = np.eye(self.num_meas)
     self.MeasMatrix = np.concatenate((ZeroArray,IdenArray),axis=1)

  def InitRoutingMatrix(self, all_zeros=False):
    if all_zeros:
      temp = np.zeros((self.num_meas,self.num_flows))
    else:
      flow_mat = np.eye(self.num_flows)
      temp = flow_mat
      for i in range(self.num_switches - 1):
        temp = np.concatenate((temp,flow_mat),axis=0)
    return temp
    
  def InitProcessNoise(self):
    # Init upper left corner -- num_flow x num_flow
    upper_left1 = np.eye(self.num_flows) * self.pnoise_diag_scale_down
    upper_left2 = np.ones((self.num_flows, self.num_flows)) - upper_left1
    upper_left2 = upper_left2 * self.flow_pnoise_mult
    # Init upper right corner -- num_flow x num_meas  
    #upper_right = np.ones((self.num_flows, self.num_meas)) * self.flow_meas_pnoise_mult
    upper_right1 = np.eye(self.num_flows) * self.pnoise_diag_scale_down
    upper_right2 = np.ones((self.num_flows, self.num_flows)) - upper_right1
    upper_right2 = upper_right2 * self.cross_pnoise_mult
    upper_right = upper_right2
    for i in range(self.num_switches - 1):
      upper_right = np.concatenate((upper_right, upper_right2), axis=1)
    lower_left = upper_right.T
    lower_right1 = np.eye(self.num_meas) * self.pnoise_diag_scale_down
    lower_right2 = np.ones((self.num_meas, self.num_meas)) - lower_right1
    lower_right2 = lower_right2 * self.meas_pnoise_mult  
    comp1 = np.concatenate((upper_left2, upper_right), axis=1)
    comp2 = np.concatenate((lower_left, lower_right2), axis=1)
    self.ProcessNoise = np.concatenate((comp1,comp2),axis=0)


 # ------------------------------------------------------------------------------------------
 # ------------------------------------------------------------------------------------------
 # End State initialization functions here --------------------------------------------------
 # ------------------------------------------------------------------------------------------
 # ------------------------------------------------------------------------------------------

 # ------------------------------------------------------------------------------------------
 # ------------------------------------------------------------------------------------------
 # Start State equations here ---------------------------------------------------------------
 # ------------------------------------------------------------------------------------------
 # ------------------------------------------------------------------------------------------

  # Equation 11 -- Predict State Vector
  def PredictState(self):
    time_diff = self.curr_time - self.prev_time
    self.CalcStateTrans(time_diff)
    self.StatePrediction = np.dot(self.StateTrans,self.StateVec)
    #scaledStateTrans = self.StateTrans * time_diff
    #self.StatePrediction = np.dot(scaledStateTrans,self.StateVec)

  # Equation 12 -- Update State Covariance
  def PredictCovar(self):
    #time_scale = self.curr_time - self.prev_time
    #StateTrans = self.StateTrans * time_scale
    temp = np.dot(self.StateCovar,self.StateTrans.T)
    temp = np.dot(self.StateTrans,temp)
    self.StateCovar = temp + self.ProcessNoise
    
  # Equation 13 -- Update Gains
  def UpdateGains(self):
     # This is also the numerator
     temp = np.dot(self.StateCovar, self.MeasMatrix.T)
     numer = temp
     # This calculates the denominator
     temp1 = np.dot(self.MeasMatrix, temp)
     temp2 = self.MeasCovar + temp1
     denom = inv(temp2)
     self.Gains = np.dot(numer,denom)

  # The idea of this is the gain terms that feed the rates terms need compensated for time
  # The size of the gains matrix is (num_flows + num_meas) by (num_meas)
  def CompensateGain(self):
     topArray = np.ones((self.num_flows,self.num_meas)) / (self.curr_time - self.prev_time)
     bottomArray = np.ones((self.num_flows,self.num_meas))
     fullArray = np.concatenate((topArray,bottomArray),axis=0)
     self.Gains *= fullArray

  # Equation 14 -- Update State Vector
  def UpdateStateVector(self):
     temp = np.dot(self.MeasMatrix, self.StatePrediction)
     temp2 = self.MeasVector - temp
     temp3 = np.dot(self.Gains, temp2)
     self.StateVec = self.StatePrediction + temp3
     #print("Here is the measurement made")
     #print(self.MeasVector)

  # Equation 15 -- Update State Covariance
  def UpdateStateCovar(self):  
     Ivec = np.eye(self.size_state_vec,self.size_state_vec)
     temp = np.dot(self.Gains, self.MeasMatrix)
     temp2 = Ivec - temp
     self.StateCovar = np.dot(temp, self.StateCovar)

 # -----------------------------------------------------------------------------
 # -----------------------------------------------------------------------------
 # End State equations here ----------------------------------------------------
 # -----------------------------------------------------------------------------
 # -----------------------------------------------------------------------------

 # ------------------------------------------------------------------------------------------
 # ------------------------------------------------------------------------------------------
 # Start Main Methods here ---------------------------------------------------------------
 # ------------------------------------------------------------------------------------------
 # ------------------------------------------------------------------------------------------
  
  # This routine updates the time based on "clock" time
  def UpdateTime(self):
    self.prev_time = self.curr_time
    self.curr_time = time.time()

  # This routine updates the time based on sim time
  def FixTime(self, man_time):
    self.prev_time = self.curr_time
    self.curr_time = man_time

  # This routine init the time based on sim time
  def InitFixTime(self, man_time):
    self.prev_time = man_time
    self.curr_time = man_time

  # This routine receives the measured bytes each switch to update the measurement vector
  # The ordering of the measured Values will be a list from 1 -> 2,n, 2 -> 1,n ... n-1 -> 1,n
  def UpdateMeasurements(self, measVals, switchNo = 1, numHosts = 8):
    # Calculate starting position of measured values vector
    startIndex = (switchNo - 1) * self.num_flows
    # Loop over measVals and insert into measured values
    for i in range(self.num_flows):
      #print("The index is " + str(i) + " and the startIndex = " + str(startIndex))
      self.MeasVector[i + startIndex,0] = measVals[i,0]

  def Update(self, set_time=False, fixed_time=0.0):
    # first update the time for the correct time difference amount
    if set_time:
      self.FixTime(fixed_time)
    else:
      self.UpdateTime()

    # Calculate Eq 11
    self.PredictState()

    # Calculate Eq 12
    self.PredictCovar()

    # Calculate Eq 13
    self.UpdateGains()

    # Calculate Eq 14
    self.UpdateStateVector()

    # Calculate Eq 15
    self.UpdateStateCovar()

    # Clear the measurement vector
    self.MeasVector = np.zeros((self.num_meas,1))

  # This outputs the state vector to a file output for later post-processing
  # TODO:  Finish this method up
  def OutputStateResult(self, file):
    pass

  # This outputs the state vector to a file output for later post-processing
  def ReturnStateResult(self):
    return self.StateVec

  # This outputs the predicted state vector
  def ReturnStatePredict(self):
    return self.StatePrediction

  # This outputs the state covar vector to a file output for later post-processing
  def ReturnStateCovarResult(self):
    return self.StateCovar

  # This outputs the state covar vector to a file output for later post-processing
  def ReturnGainResult(self):
    return self.Gains

  # This outputs the state covar vector to a file output for later post-processing
  def ReturnMeasMatrix(self):
    return self.MeasMatrix

  # This outputs the Measurement Noise Matrix
  def ReturnMeasNoise(self):
    return self.MeasCovar

  # This outputs the Measurement Noise Matrix
  def ReturnProcessNoise(self):
    return self.ProcessNoise

 # -----------------------------------------------------------------------------
 # -----------------------------------------------------------------------------
 # End Main Methods here ----------------------------------------------------
 # -----------------------------------------------------------------------------
 # ----------------------------------------------------------------------------- 

 # -----------------------------------------------------------------------------
 # -----------------------------------------------------------------------------
 # helper functions below ---------------------------------------------
 # -----------------------------------------------------------------------------
 # -----------------------------------------------------------------------------

  # This computes the index into the measurement vector
  def ComputeMeasIndex(self,flow_num, switch_num):
    return flow_num + switch_num * self.num_flows 

  # This updates the measurement vector  
  def UpdateMeasurement(self,flow_num, switch_num, measurement):
#    if switch_num < 1:
#      print "invalid switch num %i " %switch_num
#    print("The flow num = " + str(flow_num) + " and switch num = " + str(switch_num))
    # TODO:  Make sure that this indexing is correct
    self.MeasVector[(switch_num - 1) * self.num_flows + flow_num - 1] = measurement

  def ComputeFlowNum(self,host_src, host_dst):
    temp = 1
    count = self.num_hosts + 1
    for i in range(1,count):
        for j in range(1,count):
            if i == j:
                pass
            elif i == host_src and j == host_dst:
                return temp
            else:
                temp += 1

# This is the case of a simple one switch and two cost topology
# The routing matrix should be a simple 2x2 identity matrix
def CalculateSimpleTopo():
  return np.eye(2)
  

def TwoSwitchFourHost(s):
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=1, HostDst=2)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=2, HostDst=1)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=1, HostDst=3)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=3, HostDst=1)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=1, HostDst=3)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=3, HostDst=1)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=2, HostDst=4)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=4, HostDst=2)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=2, HostDst=4)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=4, HostDst=2)

def OneSwitchTwoHost(s):
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=1, HostDst=2)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=2, HostDst=1)

def TwoSwitchThreeHost(s):
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=1, HostDst=2)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=2, HostDst=1)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=1, HostDst=3)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=3, HostDst=1)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=2, HostDst=3)
    s.AddRouteForRouteMatrix(switchNo=1, HostSrc=3, HostDst=2)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=1, HostDst=3)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=3, HostDst=1)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=2, HostDst=3)
    s.AddRouteForRouteMatrix(switchNo=2, HostSrc=3, HostDst=2)

# The purpose of this is to debug the Kalman filtering
if __name__ == '__main__':
  # This initializes the simpliest meaningful case
  noSwitches = 1
  noHosts = 2 
  noFlows = noHosts * (noHosts - 1)
  noMeas = noFlows * noSwitches
  s = StateMachine(num_switches=noSwitches,num_hosts=noHosts)
  print("State machine created with " + str(noSwitches) + " switches and " + str(noHosts) + " hosts")
  s.InitFixTime(0.0)
  print("Time initialized")

  # Check Transition Matrix Definition
  #s.DefineRoutingMatrix(CalculateSimpleTopo())
  # Check for adding states to routing matrix properly
  # Note:  This is specific to the topology and needs to be tweaked based on example
  if noSwitches == 2 and noHosts == 4:
    TwoSwitchFourHost(s)
  elif noSwitches == 1 and noHosts == 2:
    OneSwitchTwoHost(s)
  elif noSwitches == 2 and noHosts == 3:
    TwoSwitchThreeHost(s)  

  #print("Proper Routing Matrix installed")
  #print ("The current state transition matrix is ")
  #print (s.StateTrans)
  next_time = 1
  #print ("Update time here to " + str(next_time))
  s.FixTime(next_time)
  s.CalcStateTrans(next_time - s.prev_time)
  print ("The first calculated state transition matrix is ")
  print (s.StateTrans)

  # Check measurement update  
  print("Update the measurements here")
  if noSwitches == 1 and noHosts == 2:
    measurements = np.array([[1],[2]])
    s.UpdateMeasurements(measurements, switchNo=1, numHosts=noHosts)
  elif noSwitches == 2 and noHosts == 3:
    measurements1 = np.array([[1],[0],[1],[0],[1],[0]])
    measurements2 = np.array([[0],[0],[0],[0],[1],[0]])
    s.UpdateMeasurements(measurements1, switchNo=1, numHosts=noHosts)
    s.UpdateMeasurements(measurements2, switchNo=2, numHosts=noHosts)
  else:
    measurements = np.zeros((noMeas,1))
    s.UpdateMeasurements(measurements, switchNo=noSwitches, numHosts=noHosts)

  print(s.MeasVector)

  # Check state vector prediction
  # Initialize the state vector to a non-zero state for the one switch, two host case
  if noSwitches == 1 and noHosts == 2:
    s.StateVec = np.array([[1],[0],[0.5],[0]])
  print("The State Vector before prediction")
  print(s.ReturnStateResult())
  print("Predict State here")
  s.PredictState()
  print(s.ReturnStatePredict())

  # Check state covariance
  print("The State Covar before prediction")
  print(s.ReturnStateCovarResult())
  print("Predict State Covar here")
  s.PredictCovar()
  print(s.ReturnStateCovarResult())

  # The Process Noise matrix
  print("The process noise matrix")
  print(s.ReturnProcessNoise())

  # The Measurement Noise matrix
  print("The measurement noise matrix")
  print(s.ReturnMeasNoise())

  #Check the measurement matrix
  print("The Measurement Matrix")
  print(s.ReturnMeasMatrix())

  # Check gain matrix
  print("The Gain Matrix before prediction")
  print(s.ReturnGainResult())
  print("Predict Gain here")
  s.UpdateGains()
  print(s.ReturnGainResult())
  s.CompensateGain()
  print("Compensated Gain Matrix for time diff")  
  print(s.ReturnGainResult())

  # Check state vector update
  print("The State Vector before update")
  print(s.ReturnStateResult())
  print("Update State here")
  s.UpdateStateVector()
  print(s.ReturnStateResult())

  # Check state covariance update
  print("The State Covar before update")
  print(s.ReturnStateCovarResult())
  print("Update State Covar here")
  s.UpdateStateCovar()
  print(s.ReturnStateCovarResult()) 

  print("numerator")
  print(np.dot(s.ReturnStateCovarResult(),s.ReturnMeasMatrix().T))
   
